{"version":3,"sources":["Components/contact.js","Components/Main.js","Components/About.js","Components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["renderContact","contact","map","site","className","href","url","target","rel","icon","Main","props","to","About","Portfolio","App","console","log","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"81BAaeA,EAVO,WACpB,OAAOC,EAAQC,KAAI,SAAAC,GACjB,OACE,uBAAGC,UAAU,OAAOC,KAAQF,EAAKG,IAAMC,OAAO,SAASC,IAAI,uBACzD,uBAAGJ,UAAYD,EAAKM,YCuBbC,MAzBf,SAAeC,GAEb,OAEE,6BAEE,yBAAKP,UAAU,cACXJ,KAGJ,yBAAKI,UAAU,QACb,sCACA,uCACA,2DAEA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMQ,GAAG,UAAT,IAAmB,yCAAnB,KACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,IAAuB,6CAAvB,SCUKC,MA3Bf,SAAgBF,GAEd,OACE,6BAEE,yBAAKP,UAAU,cACXJ,KAGJ,yBAAKI,UAAU,QACb,sCACA,yBAAKA,UAAU,OAAf,sWAKA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMQ,GAAG,KAAT,IAAc,4BAAQR,UAAU,OAAlB,QAAd,KACA,kBAAC,IAAD,CAAMQ,GAAG,cAAT,IAAuB,4BAAQR,UAAU,OAAlB,aAAvB,SCMKU,MAzBf,SAAoBH,GAClB,OACE,6BACE,yBAAKP,UAAU,cACXJ,KAGJ,yBAAKI,UAAU,QAEb,yCACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,iBAAf,mBACA,yBAAKA,UAAU,iBAAf,UACA,yBAAKA,UAAU,iBAAf,eAEF,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMQ,GAAG,KAAT,IAAc,4BAAQR,UAAU,OAAlB,QAAd,KACA,kBAAC,IAAD,CAAMQ,GAAG,UAAT,IAAmB,4BAAQR,UAAU,OAAlB,SAAnB,S,OCYKW,MAzBf,WAIE,OAHAC,QAAQC,IAAI,oDACZD,QAAQC,IAAI,yCAGV,yBAAKb,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEc,KAAK,SACLC,UAAYN,IAEd,kBAAC,IAAD,CACEK,KAAK,aACLC,UAAYL,IAEd,kBAAC,IAAD,CACEM,OAAK,EAACF,KAAK,IACXC,UAAYT,OCbFW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.b8b0ac5d.chunk.js","sourcesContent":["import React from 'react';\nimport contact from '../db.json'\n\nconst renderContact = () => {\n  return contact.map(site => {\n    return (\n      <a className='icon' href= { site.url } target=\"_blank\" rel=\"noopener noreferrer\">\n        <i className={ site.icon }></i>\n      </a>\n    )\n  })\n}\n\nexport default renderContact;\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport contact from '../db.json'\nimport renderContact from './contact'\n\nfunction Main (props) {\n\n  return(\n\n    <div>\n\n      <div className='icon-links'>\n        { renderContact() }\n      </div>\n\n      <div className='main'>\n        <h1>Gracie</h1>\n        <h1>McGuire</h1>\n        <p>Software Engineer | Designer</p>\n\n        <div className='buttons'>\n          <Link to='/about'> <button>About</button> </Link>\n          <Link to='/portfolio'> <button>Portfolio</button> </Link>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\nexport default Main;\n","import React from 'react'\nimport renderContact from './contact'\nimport { Link } from 'react-router-dom'\n\n\nfunction About (props) {\n\n  return(\n    <div>\n\n      <div className='icon-links'>\n        { renderContact() }\n      </div>\n\n      <div className='main'>\n        <h1>Hello!</h1>\n        <div className='bio'>\n          I am a full stack software engineer and designer born and raised in Denver, but currently residing in Brooklyn. I have a passion for social justice and progessive politics, and want to use my skills and my voice to help make the world a better and more inclusive place. I love finding creative solutions to problems, and am always striving to learn more.\n        </div>\n\n\n        <div className='buttons'>\n          <Link to='/'> <button className='btn'>Home</button> </Link>\n          <Link to='/portfolio'> <button className='btn'>Portfolio</button> </Link>\n        </div>\n\n      </div>\n\n\n    </div>\n  )\n}\nexport default About;\n","import React from 'react'\nimport renderContact from './contact'\nimport { Link } from 'react-router-dom'\n\nfunction Portfolio (props) {\n  return(\n    <div>\n      <div className='icon-links'>\n        { renderContact() }\n      </div>\n\n      <div className='main'>\n\n        <h1>Portfolio</h1>\n        <div className='render-modal'>\n          <div className='portfolio btn'>Web Development</div>\n          <div className='portfolio btn'>Design</div>\n          <div className='portfolio btn'>Everything</div>\n        </div>\n        <div className='buttons port'>\n          <Link to='/'> <button className='btn'>Home</button> </Link>\n          <Link to='/about'> <button className='btn'>About</button> </Link>\n        </div>\n\n        </div>\n\n    </div>\n  )\n}\nexport default Portfolio\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main.js'\nimport About from './Components/About'\nimport Portfolio from './Components/Portfolio'\n\nimport { Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  console.log(\"Made with ‚ù§Ô∏è by Gracie McGuire in 2019\");\n  console.log(\"github.com/graciemcguire üèù\");\n\n  return (\n    <div className='app'>\n      <Switch>\n        <Route\n          path=\"/about\"\n          component={ About }\n        />\n        <Route\n          path=\"/portfolio\"\n          component={ Portfolio }\n        />\n        <Route\n          exact path=\"/\"\n          component={ Main }\n        />\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename='/'>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}